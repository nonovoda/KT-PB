import os
from fastapi import FastAPI, Request
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
from datetime import datetime, timedelta
import aiohttp

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "your_bot_token")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "your_chat_id")
KEITARO_API_KEY = os.getenv("KEITARO_API_KEY", "your_keitaro_api_key")
KEITARO_URL = os.getenv("KEITARO_URL", "https://your-tracker.com")

# --- Telegram bot ---
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()
bot = Bot(token=TELEGRAM_TOKEN)

# --- FastAPI ---
app = FastAPI()


@app.get("/")
async def root():
    return {"status": "ok", "message": "Keitaro Bot Running"}


@app.api_route("/webhook", methods=["GET", "POST"])
async def webhook(request: Request):
    data = dict(request.query_params)
    if request.method == "POST":
        try:
            data = await request.json()
        except:
            data = await request.form()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    sub1 = data.get("sub1", "N/A")
    status = data.get("status", "N/A")
    revenue = data.get("revenue", "0")
    currency = data.get("currency", "USD")
    campaign = data.get("campaign", "N/A")
    adset = data.get("adset", "N/A")
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    msg = (
        "üì• <b>–ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è!</b>\n\n"
        f"üéØ <b>–°–æ–±—ã—Ç–∏–µ:</b> <i>{status}</i>\n"
        f"üí∞ <b>–í—ã–ø–ª–∞—Ç–∞:</b> <i>{revenue} {currency}</i>\n"
        f"üìõ <b>–ö–∞–º–ø–∞–Ω–∏—è:</b> <i>{campaign}</i>\n"
        f"üìõ <b>–ê–¥—Å–µ—Ç:</b> <i>{adset}</i>\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> <i>{timestamp}</i>"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    try:
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=msg, parse_mode="HTML")
        return {"status": "ok"}
    except Exception as e:
        return {"status": "error", "details": str(e)}

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ 7 –¥–Ω–µ–π ---
async def fetch_7days_stats_from_keitaro():
    headers = {"Api-Key": KEITARO_API_KEY}
    date_to = datetime.now().date()
    date_from = date_to - timedelta(days=6)

    params = {
        "grouping": "day",
        "timezone": "UTC",
        "range": "custom",
        "from": str(date_from),
        "to": str(date_to),
        "columns[]": ["clicks", "unique_clicks", "goal1", "goal2", "goal3", "payout"]
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(f"{KEITARO_URL}/admin_api/v1/statistics", headers=headers, params=params) as resp:
            if resp.status != 200:
                return False, f"–û—à–∏–±–∫–∞ Keitaro API: {resp.status}"
            data = await resp.json()
            return True, data


# --- –ö–æ–º–∞–Ω–¥–∞ /stats_7days ---
async def stats_7days_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ 7 –¥–Ω–µ–π...")

    ok, data = await fetch_7days_stats_from_keitaro()
    if not ok:
        await update.message.reply_text(f"‚ùå {data}")
        return

    clicks = uniques = reg = dep = rd = 0
    payout = 0.0

    for row in data.get("rows", []):
        clicks += row.get("clicks", 0)
        uniques += row.get("unique_clicks", 0)
        reg += row.get("goal1", 0)
        dep += row.get("goal2", 0)
        rd += row.get("goal3", 0)
        payout += float(row.get("payout", 0))

    msg = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π</b>\n\n"
        f"üëÅ <b>–ö–ª–∏–∫–∏:</b> {clicks} (—É–Ω–∏–∫: {uniques})\n"
        f"üÜï <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg}\n"
        f"üíµ <b>–î–µ–ø–æ–∑–∏—Ç—ã:</b> {dep}\n"
        f"üîÅ <b>RD:</b> {rd}\n"
        f"üí∞ <b>–î–æ—Ö–æ–¥:</b> {payout:.2f} USD"
    )

    await update.message.reply_text(msg, parse_mode="HTML")

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã ---
telegram_app.add_handler(CommandHandler("stats_7days", stats_7days_command))


# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    import uvicorn
    import asyncio

    loop = asyncio.get_event_loop()
    loop.create_task(telegram_app.initialize())
    loop.create_task(telegram_app.start())
    uvicorn.run(app, host="0.0.0.0", port=PORT)
